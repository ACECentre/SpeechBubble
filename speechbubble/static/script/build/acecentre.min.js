var app = angular
    .module('speechBubble', ["checklist-model", "ui.bootstrap", 'angular-flash.service', 'angular-flash.flash-alert-directive', 'dialogs.main', 'pascalprecht.translate'])
    .config(['flashProvider', function (flashProvider) {
        flashProvider.errorClassnames.push('alert-danger');
    }]);;app.controller('EditFormCtrl', ["$scope", "$window", "dialogs", "ProductDataService", function($scope, $window, dialogs,  ProductData) {

	$scope.lang = 'en-US';
	$scope.language = 'English';

    // $translate.use($scope.lang);
    // TODO - get angular translate working properly for dialog buttons

    // the form data
    $scope.form_data = ProductData.form_data;

    $scope.product = ProductData;

    // conditional field rules
    $scope.display_rules = {};

    // conditional fields that and their current display state
    $scope.field_state = {};


    /* $scope.create = function(){
        response = dataFactory.createItem($scope.form_data);

        response.success(function(data, status) {
            if(data.errors) {
                $scope.product.field_errors = data.errors;
            }
            else{
                $window.location.href = "/edit/" + data.id + "/" + data.uid;
            }
        });
    }; */

    $scope.delete = function(itemId, userId){
        var dlg = dialogs.confirm('Please Confirm', 'Are you sure you want to delete this draft?');

        dlg.result.then(function(btn){
		    dataFactory.deleteDraft($scope.itemId, $scope.userId).success(function(data){
                $window.location = "/";
            });
		},function(btn){
		    // do nothing if user clicks 'no'
		});
    };

/*
        $scope.moderation = function(action){
        dataFactory.moderationAction($scope.modId, action).success(function(data){

        });
    };

    $scope.load = function(itemId, userId){

        $scope.itemId = itemId;
        $scope.userId = userId;

        console.log(ProductData);

        ProductData.load(itemId, userId);

        $scope.form_data = ProductData.form_data;
    };
*/
}]);;app.controller('EditSideBarCtrl', ["$scope", "ProductDataService", function($scope, ProductData){

    $scope.product = ProductData;

}]);;app.controller('SupplierEditCtrl', ['$scope', function($scope){

}]);;app.controller('SupplierListCtrl', ['$scope', function($scope) {
    $scope.selectedRegions = [];
}]);;app.factory('dataFactory', ['$http', function($http){
    var urlBase = "/api/";
    var dataFactory = {};

    dataFactory.createItem = function(data){
        return $http.post(urlBase+"product/create", data);
    };

    dataFactory.saveDraft = function(itemId, userId, data){
        return $http.put(urlBase+"product/"+itemId+"/"+userId, data);
    };

    dataFactory.deleteDraft = function(itemId, userId){
        return $http.delete(urlBase+"product/"+itemId+"/"+userId);
    };

    dataFactory.getDraft = function(itemId, userId){
        return $http.get(urlBase+"product/"+itemId+"/"+userId);
    };

    dataFactory.getOrCreateDraft = function(itemId, userId){
        return $http.post(urlBase+"product/"+itemId+"/"+userId);
    };

    dataFactory.moderationRequest = function(itemId, userId, data){
        return $http.post(urlBase+"moderation/create/"+itemId+"/"+userId, data);
    };

    dataFactory.moderationAction = function(modId, action){
        return $http.put(urlBase+"moderation/"+modId+"/"+action);
    };

    dataFactory.changeUrl = function(itemId, url){
        return $http.post(urlBase+"moderation/url/"+itemId, {url: url});
    }

    return dataFactory;
}]);;app.factory('ProductDataService', ['dataFactory', '$window', 'flash', function(dataFactory, $window, flash){
    var factory = {};

    // the form data
    factory.form_data = {};

    // conditional field rules
    factory.display_rules = {};

    // conditional fields that and their current display state
    factory.field_state = {};

    // field errors
    factory.field_errors = {};

    factory.save = function() {

        response = dataFactory.saveDraft(factory.itemId, factory.userId, factory.form_data);

        response.success(function (data, status) {
            factory.field_errors = {};
            if (data.errors) {
                factory.field_errors = data.errors;
            }
            else {
                factory.saved = data.success;
                factory.stats = data.stats;
                flash.success = "Saved!";
            }
        });
    };

    factory.load = function(itemId, userId){
        factory.itemId = itemId;
        factory.userId = userId;

        dataFactory.getDraft(itemId, userId).success(function(data){
            if(data.success){
                factory.form_data = data.data;
                factory.stats = data.stats;
                console.log(data.moderation);
                factory.isModerating = data.moderation ? true : false;
                factory.moderation = data.moderation;
            }
            else{
                $window.location = "/";
            }
        });
    };

    factory.publishRequest = function(){
        response = dataFactory.moderationRequest(factory.itemId, factory.userId, factory.form_data);

        response.success(function(data, status){
            factory.field_errors = {};

            if(data.failed){
                flash.error = data.failed;
            }
            else if(data.errors){
                factory.field_errors = data.errors;
                console.log(data.errors);
                flash.error = "Unable to finalise document - please correct the form errors and try again."
            }
            else{
                flash.success = "Thanks. This draft will be reviewed by our moderators.";
                factory.isModerating = true;
                window.location.reload();
            }
        });
    };

    factory.unlockForEditing = function(){
        response = dataFactory.moderationAction(factory.moderation, "delete");

        response.success(function(data, status){
            if(data.success){
                window.location.reload();
            }
        });
    };

    factory.changeUrl = function(){
        url = $('#product_url').val();
        response = dataFactory.changeUrl(factory.itemId, url)
    };

    factory.create = function(){
        response = dataFactory.createItem(factory.form_data);

        response.success(function(data, status) {
            if(data.errors) {
                factory.field_errors = data.errors;
            }
            else{
                $window.location.href = "/edit/" + data.id + "/" + data.uid;
            }
        });
    };

    return factory;

}]);;app.directive('sbConditionalRule', ['$parse', function($parse){
    return {
        restrict: "E",
        link: function(scope, element, attrs){

            if(!scope.product.form_data){
                scope.product.form_data = {}
            }

            if(!attrs.show || ! attrs.when || !attrs.is){
                throw "You must supply `show` and `when` and `is` attributes";
            }

            scope.display_rules[attrs.show] = [attrs.when, attrs.is];

            scope.$watch(
                "product.form_data."+attrs.when,
                function(newValue, oldValue){

                    var visible = true;
                    var value = angular.isArray(newValue) ? newValue : [newValue];

                    if(attrs.is.indexOf('[') !== -1){
                        // bit hacky - it'd be better if string values were
                        // quoted so that $eval doesn't attempt to find them
                        // on scope, and thus avoiding the above test.
                        var condition = scope.$eval(attrs.is);
                    }
                    else{
                       var condition = attrs.is;
                    }

                    if(angular.isArray(condition)){
                        visible = _.intersection(value, condition).length > 0;
                    }
                    else if(_.contains(["True", "False", condition])){
                        console.log('boolean comparison');
                    }
                    else{
                        visible = _.contains(value, condition);
                    }
                    scope.field_state[attrs.show] = visible;
                }, true
           );
        }
    }
}]);;app.directive("sbShowIfVisible", ['$parse', function($parse) {
    return {
        link: function(scope, element, attrs){
            
            var field = attrs['sbShowIfVisible'];

            if(scope.field_state[field] === undefined){
                scope.field_state[field] = "";
            }

            scope.$watch('field_state.'+field, function(newData, oldData){
                element.css('display', (newData ? "block": "none"));
            })
        }
    }
}]);